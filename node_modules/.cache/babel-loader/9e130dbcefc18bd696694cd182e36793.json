{"ast":null,"code":"var _jsxFileName = \"/Users/jeromekithinji/Development/react/weather-api/src/components/WeatherInfo/WeatherInfo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./WeatherInfo.scss\";\nimport { geolocated } from \"react-geolocated\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherInfo = () => {\n  _s();\n\n  //defining state with \"empty\" object to begin with\n  const [weatherStats, setWeatherStats] = useState({});\n\n  const getWeatherStats = () => {\n    fetch(\"http://api.weatherapi.com/v1/current.json?key=e38763e617664e56ab8162340220102&q=London&aqi=no\").then(response => response.json()) // returing response turned to json which also returns a promise\n    .then(jsonResponse => setWeatherStats(jsonResponse)) // taking the jsonified respose from last .then() and setting it to the local state\n    .catch(err => console.log(err)); // error handling\n  };\n\n  useEffect(() => {\n    getWeatherStats();\n  }, []);\n  return this.props.isGeolocationAvailable ? // Check location is enable in\n  // browser or not\n  this.props.isGeolocationEnabled ? // Check coordinates of current\n  // location is available or not\n  this.props.coords ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"tweet__text\",\n      children: weatherStats ? weatherStats.location.country : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"green\"\n      },\n      children: \"GeeksForGeeks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"Current latitude and longitude of the user is\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"latitude - \", this.props.coords.latitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"longitude - \", this.props.coords.longitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Getting the location data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Please enable location on your browser\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 15\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Please, update your or change the browser \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 13\n  }, this) // <div>\n  // </div>\n  ;\n};\n\n_s(WeatherInfo, \"mOxlOhC2e5MiLPnbWmOrCjf2ZZY=\");\n\n_c = WeatherInfo;\nexport default WeatherInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherInfo\");","map":{"version":3,"sources":["/Users/jeromekithinji/Development/react/weather-api/src/components/WeatherInfo/WeatherInfo.jsx"],"names":["React","useState","useEffect","geolocated","WeatherInfo","weatherStats","setWeatherStats","getWeatherStats","fetch","then","response","json","jsonResponse","catch","err","console","log","props","isGeolocationAvailable","isGeolocationEnabled","coords","location","country","color","latitude","longitude"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,oBAAP;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMM,eAAe,GAAG,MAAM;AAC1BC,IAAAA,KAAK,CAAC,+FAAD,CAAL,CACKC,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EACyC;AADzC,KAEKF,IAFL,CAEWG,YAAD,IAAkBN,eAAe,CAACM,YAAD,CAF3C,EAE2D;AAF3D,KAGKC,KAHL,CAGYC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHpB,EAD0B,CAIa;AAE1C,GAND;;AAQAZ,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,eAAe;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,SACI,KAAKU,KAAL,CAAWC,sBAAX,GAEI;AACA;AACA,OAAKD,KAAL,CAAWE,oBAAX,GAEE;AACA;AACA,OAAKF,KAAL,CAAWG,MAAX,gBACE;AAAA,4BACA;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA,gBAA4Bf,YAAY,GAAGA,YAAY,CAACgB,QAAb,CAAsBC,OAAzB,GAAmC;AAA3E;AAAA;AAAA;AAAA;AAAA,YADA,eAEE;AAAI,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAI,MAAA,KAAK,EAAE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAA,8BACE;AAAA,kCAAgB,KAAKN,KAAL,CAAWG,MAAX,CAAkBI,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mCAAiB,KAAKP,KAAL,CAAWG,MAAX,CAAkBK,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,gBAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAjBJ,gBAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAxBN,gBA2BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA5BR,CA+BI;AACA;AAhCJ;AAkCH,CAlDD;;GAAMrB,W;;KAAAA,W;AAoDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./WeatherInfo.scss\";\nimport { geolocated } from \"react-geolocated\";\n\n\nconst WeatherInfo = () => {\n    //defining state with \"empty\" object to begin with\n    const [weatherStats, setWeatherStats] = useState({});\n\n    const getWeatherStats = () => {\n        fetch(\"http://api.weatherapi.com/v1/current.json?key=e38763e617664e56ab8162340220102&q=London&aqi=no\")\n            .then((response) => response.json()) // returing response turned to json which also returns a promise\n            .then((jsonResponse) => setWeatherStats(jsonResponse)) // taking the jsonified respose from last .then() and setting it to the local state\n            .catch((err) => console.log(err)); // error handling\n\n    }\n\n    useEffect(() => {\n        getWeatherStats();\n    }, []);\n\n    return (\n        this.props.isGeolocationAvailable ? (\n \n            // Check location is enable in\n            // browser or not\n            this.props.isGeolocationEnabled ? (\n       \n              // Check coordinates of current\n              // location is available or not\n              this.props.coords ? (\n                <div>\n                <p className=\"tweet__text\">{weatherStats ? weatherStats.location.country : \"\"}</p>\n                  <h1 style={{ color: \"green\" }}>GeeksForGeeks</h1>\n                  <h3 style={{ color: \"red\" }}>\n                    Current latitude and longitude of the user is\n                  </h3>\n                  <ul>\n                    <li>latitude - {this.props.coords.latitude}</li>\n                    <li>longitude - {this.props.coords.longitude}</li>\n                  </ul>\n                </div>\n              ) : (\n                <h1>Getting the location data</h1>\n              )\n            ) : (\n              <h1>Please enable location on your browser</h1>\n            )\n          ) : (\n            <h1>Please, update your or change the browser </h1>\n          )\n\n        // <div>\n        // </div>\n    );\n};\n\nexport default WeatherInfo;\n"]},"metadata":{},"sourceType":"module"}