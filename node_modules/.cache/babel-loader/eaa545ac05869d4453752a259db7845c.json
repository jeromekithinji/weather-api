{"ast":null,"code":"var _jsxFileName = \"/Users/jeromekithinji/Development/react/weather-api/src/components/WeatherInfo/WeatherInfo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./WeatherInfo.scss\";\nimport { geolocation } from \"react-geolocated\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherInfo = () => {\n  _s();\n\n  //defining state with \"empty\" object to begin with\n  const [weatherStats, setWeatherStats] = useState({\n    city: [{\n      location: {\n        name: \"\"\n      }\n    }],\n    tempCelius: [{\n      currrent: {\n        temp_c: \"\"\n      }\n    }],\n    tempFarenheit: [{\n      currrent: {\n        temp_f: \"\"\n      }\n    }],\n    conditionText: [{\n      condition: {\n        text: \"\"\n      }\n    }],\n    conditionIcon: [{\n      condition: {\n        icon: \"\"\n      }\n    }]\n  });\n\n  const getWeatherStats = () => {\n    // fetch(\"http://api.weatherapi.com/v1/current.json?key=e38763e617664e56ab8162340220102&q=London&aqi=no\", { mode: 'no-cors'})\n    fetch(\"http://api.weatherapi.com/v1/current.json?key=e38763e617664e56ab8162340220102&q=London&aqi=no\").then(response => response.json()) // returning response turned to json which also returns a promise\n    .then(jsonResponse => setWeatherStats(jsonResponse)) // taking the jsonified respose from last .then() and setting it to the local state\n    .catch(err => console.log(err)); // error handling\n\n    console.log(weatherStats.location.name);\n  };\n\n  useEffect(() => {\n    getWeatherStats();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"tweet__text\",\n      children: weatherStats ? weatherStats.location.name : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"tweet__text\",\n      children: weatherStats ? weatherStats.current.temp_c : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"tweet__text\",\n      children: weatherStats ? weatherStats.current.temp_f : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"tweet__text\",\n      children: weatherStats ? weatherStats.current.condition.text : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherInfo, \"jvZN5JJKH54zxxYUe8kgj3aKX+I=\");\n\n_c = WeatherInfo;\nexport default WeatherInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherInfo\");","map":{"version":3,"sources":["/Users/jeromekithinji/Development/react/weather-api/src/components/WeatherInfo/WeatherInfo.jsx"],"names":["React","useState","useEffect","geolocation","WeatherInfo","weatherStats","setWeatherStats","city","location","name","tempCelius","currrent","temp_c","tempFarenheit","temp_f","conditionText","condition","text","conditionIcon","icon","getWeatherStats","fetch","then","response","json","jsonResponse","catch","err","console","log","current"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,oBAAP;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC;AAC7CM,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAZ,KAAD,CADuC;AAE7CC,IAAAA,UAAU,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV;AAAZ,KAAD,CAFiC;AAG7CC,IAAAA,aAAa,EAAE,CAAC;AAAEF,MAAAA,QAAQ,EAAE;AAAEG,QAAAA,MAAM,EAAE;AAAV;AAAZ,KAAD,CAH8B;AAI7CC,IAAAA,aAAa,EAAE,CAAC;AAAEC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAb,KAAD,CAJ8B;AAK7CC,IAAAA,aAAa,EAAE,CAAC;AAAEF,MAAAA,SAAS,EAAE;AAAEG,QAAAA,IAAI,EAAE;AAAR;AAAb,KAAD;AAL8B,GAAD,CAAhD;;AAQA,QAAMC,eAAe,GAAG,MAAM;AAC1B;AACAC,IAAAA,KAAK,CAAC,+FAAD,CAAL,CACKC,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EACyC;AADzC,KAEKF,IAFL,CAEWG,YAAD,IAAkBnB,eAAe,CAACmB,YAAD,CAF3C,EAE2D;AAF3D,KAGKC,KAHL,CAGYC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHpB,EAF0B,CAKa;;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYxB,YAAY,CAACG,QAAb,CAAsBC,IAAlC;AACP,GAPD;;AASAP,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,eAAe;AAClB,GAFQ,CAAT;AAIA,sBACI;AAAA,4BACI;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA,gBAA4Bf,YAAY,GAAGA,YAAY,CAACG,QAAb,CAAsBC,IAAzB,GAAgC;AAAxE;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA,gBAA4BJ,YAAY,GAAGA,YAAY,CAACyB,OAAb,CAAqBlB,MAAxB,GAAiC;AAAzE;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA,gBAA4BP,YAAY,GAAGA,YAAY,CAACyB,OAAb,CAAqBhB,MAAxB,GAAgC;AAAxE;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA,gBAA4BT,YAAY,GAAGA,YAAY,CAACyB,OAAb,CAAqBd,SAArB,CAA+BC,IAAlC,GAAyC;AAAjF;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAhCD;;GAAMb,W;;KAAAA,W;AAkCN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./WeatherInfo.scss\";\nimport { geolocation } from \"react-geolocated\";\n\n\nconst WeatherInfo = () => {\n    //defining state with \"empty\" object to begin with\n    const [weatherStats, setWeatherStats] = useState({\n        city: [{ location: { name: \"\" } }],\n        tempCelius: [{ currrent: { temp_c: \"\" } }],\n        tempFarenheit: [{ currrent: { temp_f: \"\" } }],\n        conditionText: [{ condition: { text: \"\" } }],\n        conditionIcon: [{ condition: { icon: \"\" } }],\n    });\n\n    const getWeatherStats = () => {\n        // fetch(\"http://api.weatherapi.com/v1/current.json?key=e38763e617664e56ab8162340220102&q=London&aqi=no\", { mode: 'no-cors'})\n        fetch(\"http://api.weatherapi.com/v1/current.json?key=e38763e617664e56ab8162340220102&q=London&aqi=no\")\n            .then((response) => response.json()) // returning response turned to json which also returns a promise\n            .then((jsonResponse) => setWeatherStats(jsonResponse)) // taking the jsonified respose from last .then() and setting it to the local state\n            .catch((err) => console.log(err)); // error handling\n            console.log(weatherStats.location.name);\n    }\n\n    useEffect(() => {\n        getWeatherStats();\n    });\n\n    return (\n        <div>\n            <p className=\"tweet__text\">{weatherStats ? weatherStats.location.name : \"\"}</p>\n            <p className=\"tweet__text\">{weatherStats ? weatherStats.current.temp_c : \"\"}</p>\n            <p className=\"tweet__text\">{weatherStats ? weatherStats.current.temp_f: \"\"}</p>\n            <p className=\"tweet__text\">{weatherStats ? weatherStats.current.condition.text : \"\"}</p>\n\n        </div>\n    );\n};\n\nexport default WeatherInfo;\n"]},"metadata":{},"sourceType":"module"}