{"ast":null,"code":"var _jsxFileName = \"/Users/jeromekithinji/Development/react/weather-api/src/components/WeatherInfo/WeatherInfo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./WeatherInfo.scss\";\nimport { geolocation } from \"react-geolocated\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherInfo = () => {\n  _s();\n\n  const [weatherStats, setWeatherStats] = useState(null); //\n\n  const [userLatitude, setUserLatitude] = useState(null);\n  const [userLongitude, setUserLongitude] = useState(null);\n\n  const successCallback = position => {\n    console.log(position);\n    console.log(position.coords.latitude);\n    console.log(position.coords.longitude);\n    setUserLongitude(position.coords.longitude);\n    setUserLatitude(position.coords.latitude);\n  };\n\n  const errorCallback = error => {\n    console.error(error);\n  };\n\n  navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n\n  const getWeatherStats = () => {\n    fetch(`http://api.weatherapi.com/v1/current.json?key=e38763e617664e56ab8162340220102&q=${(userLatitude, userLongitude)}&aqi=no`).then(response => response.json()).then(jsonResponse => setWeatherStats(jsonResponse)).catch(err => console.log(err)); // console.log(weatherStats.location.name);\n  };\n\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const weekday = new Array(7);\n  weekday[0] = \"Sunday\";\n  weekday[1] = \"Monday\";\n  weekday[2] = \"Tuesday\";\n  weekday[3] = \"Wednesday\";\n  weekday[4] = \"Thursday\";\n  weekday[5] = \"Friday\";\n  weekday[6] = \"Saturday\";\n  const date = new Date();\n  let minutes = date.getMinutes() < 11 ? \"0\" + date.getMinutes() : date.getMinutes();\n  let displayDate = weekday[date.getDay()].toUpperCase() + \" | \" + months[date.getMonth()].toUpperCase().substring(0, 3) + \" \" + date.getDate() + \" | \" + date.getHours() + \":\" + minutes;\n  const currentHour = new Date().getHours();\n  let greetingTime = \"Morning!\";\n\n  if (currentHour >= 12) {\n    greetingTime = \"Afternoon!\";\n  }\n\n  if (currentHour >= 18) {\n    greetingTime = \"Evening!\";\n  }\n\n  useEffect(() => {\n    getWeatherStats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"greeting__heading\",\n      children: [\"Good \", greetingTime, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), weatherStats ? /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"weatherIcon\",\n      src: weatherStats.current.condition.icon,\n      alt: weatherStats.current.condition.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [weatherStats ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"location\",\n        children: weatherStats.location.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"date\",\n        children: displayDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), weatherStats ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"temp\",\n        children: [weatherStats.current.temp_c, \"\\xB0C | \", weatherStats.current.temp_f, \"\\xB0F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }, this) : null, weatherStats ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"date\",\n        children: weatherStats.current.condition.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherInfo, \"GteYOe9GFBsTkKWDHkeyQqN9GR4=\");\n\n_c = WeatherInfo;\nexport default WeatherInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherInfo\");","map":{"version":3,"sources":["/Users/jeromekithinji/Development/react/weather-api/src/components/WeatherInfo/WeatherInfo.jsx"],"names":["React","useState","useEffect","geolocation","WeatherInfo","weatherStats","setWeatherStats","userLatitude","setUserLatitude","userLongitude","setUserLongitude","successCallback","position","console","log","coords","latitude","longitude","errorCallback","error","navigator","getCurrentPosition","getWeatherStats","fetch","then","response","json","jsonResponse","catch","err","months","weekday","Array","date","Date","minutes","getMinutes","displayDate","getDay","toUpperCase","getMonth","substring","getDate","getHours","currentHour","greetingTime","current","condition","icon","text","location","name","temp_c","temp_f"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./WeatherInfo.scss\";\nimport { geolocation } from \"react-geolocated\";\n\nconst WeatherInfo = () => {\n    const [weatherStats, setWeatherStats] = useState(null); //\n    const [userLatitude, setUserLatitude] = useState(null);\n    const [userLongitude, setUserLongitude] = useState(null);\n\n    const successCallback = (position) => {\n        console.log(position);\n        console.log(position.coords.latitude);\n        console.log(position.coords.longitude);\n        setUserLongitude(position.coords.longitude);\n        setUserLatitude(position.coords.latitude);\n    };\n\n    const errorCallback = (error) => {\n        console.error(error);\n    };\n\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n\n    const getWeatherStats = () => {\n        fetch(\n            `http://api.weatherapi.com/v1/current.json?key=e38763e617664e56ab8162340220102&q=${(userLatitude,userLongitude)}&aqi=no`)\n            .then((response) => response.json())\n            .then((jsonResponse) => setWeatherStats(jsonResponse))\n            .catch((err) => console.log(err));\n        // console.log(weatherStats.location.name);\n    };\n\n    const months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ];\n\n    const weekday = new Array(7);\n    weekday[0] = \"Sunday\";\n    weekday[1] = \"Monday\";\n    weekday[2] = \"Tuesday\";\n    weekday[3] = \"Wednesday\";\n    weekday[4] = \"Thursday\";\n    weekday[5] = \"Friday\";\n    weekday[6] = \"Saturday\";\n\n    const date = new Date();\n\n    let minutes =\n        date.getMinutes() < 11 ? \"0\" + date.getMinutes() : date.getMinutes();\n    let displayDate =\n        weekday[date.getDay()].toUpperCase() +\n        \" | \" +\n        months[date.getMonth()].toUpperCase().substring(0, 3) +\n        \" \" +\n        date.getDate() +\n        \" | \" +\n        date.getHours() +\n        \":\" +\n        minutes;\n\n    const currentHour = new Date().getHours();\n    let greetingTime = \"Morning!\";\n\n    if (currentHour >= 12) {\n        greetingTime = \"Afternoon!\";\n    }\n\n    if (currentHour >= 18) {\n        greetingTime = \"Evening!\";\n    }\n\n    useEffect(() => {\n        getWeatherStats();\n    }, []);\n\n    return (\n        <div className=\"weather\">\n            <h1 className=\"greeting__heading\">Good {greetingTime} </h1>\n            {weatherStats ? (\n                <img className=\"weatherIcon\"\n                    src={weatherStats.current.condition.icon}\n                    alt={weatherStats.current.condition.text}\n                />\n            ) : null}\n            <div className=\"info\">\n                {weatherStats ? <h2 className=\"location\">{weatherStats.location.name}</h2> : null}\n                <p className=\"date\">{displayDate}</p>\n                {weatherStats ? <h1 className=\"temp\">{weatherStats.current.temp_c}&deg;C | {weatherStats.current.temp_f}&deg;F</h1> : null}\n                {weatherStats ? (<h1 className=\"date\">{weatherStats.current.condition.text}</h1>) : null}\n            </div>\n        </div>\n    );\n};\n\nexport default WeatherInfo;\n"]},"metadata":{},"sourceType":"module"}